APUNTES: Herencia, generalizacion (upcasting), especializacion (downcasting), casting

--> Toda subclase hereda todos los miembros no privados de la superclase (excepto los constructores)
--> Toda clase hereda de object

- Si vehiculo tiene el atributo marca y es privado la clase Auto, que hereda de la superclase Vehiculo, no va a poder acceder desde la clase (A menos que sea no privado)

Un paquete comparte ciertas clases

- Public: Acceden todos
- Protected: No puede acceder otra clase en otro paquete (es comodo pero no esta bueno). 
- Sin modificador: No puede acceder una subclase o clase en otro paquete (Unicamente es visible dentro de un mismo paquete)
- Private: Unicamente puede acceder la misma clase. 

--> Todos los atributos de una clase tienen que ser private y en todo caso los getters son protected. 

- Los constructores no se heredan, cada clase tiene su propio constructores
    --> La subclase en su constructor tiene que mandarle por super() los atributos que recibe en su propio constructor. 
    Ejemplo: 
    public Vehiculo(String ma, String mo, String pa){
        super(); //Aca invoca al constructor de la superclase (Object). NO es obligatorio
        this.marca = ma;
        this.modelo = mo;
        this.patente = pa;
    }


    public Auto(String, ma, String mo, Strin pa, boolean ta){
        super(ma, mo, pa); //Aca invoca al constructor de la superclase (Vehiculo)
        /*
        Si la superclase no necesita ningun parametro NO hay que poner lo siguiente: 
        super(); 
        */
        this.tieneAire = ta;
    }

- GENERALIZACION (upcasting): La herencia es hacia abajo, los hijos pueden usar los metodos del padre pero no los propios del hijo. La descendencia es hacia abajo. 
Ejemplos: 
    public static void main(...){
        Auto a = new Auto();
        Vehiculo v = new Vehiculo();
        Vehiculo v2 = new Auto();
        Moto m = new Vehiculo(); //Esto NO se puede hacer porque una variable de tipo hijo no puede guardar al padre
        /*De arriba a abajo se puede pero de abajo a arriba no*/
    }

--> El casting hacia arriba se hace de manera implicita. Por eso programamos asi:  
    Auto a = new Auto()

    Y esto es innecesario: 

    Vehiculo v = a;
    Vehiculo v2 = (Vehiculo) a;

    --> No es necesario castear porque ya se que el auto es un vehiculo

    --> Con el ejemplo de una concesionaria puedo tener una lista de vehiculos en lugar de tener una lista de autos, otra de camionetas y otra de motos. 
    
    En lugar de esto: 
    public void agregarAuto(Auto a);
    public void agregarMoto(Moto m);
    public void agregarCamioneta(camioneta c);

    Tengo esto: 
    public void agregarVehiculo(Vehiculo v){
        this.vehiculos.add(v)
    }

    /*De este modo tendria que definir los vehiculos así: Vehiculo v2 = new Auto();*/

--> El unico problema de la generalizacion es que los objetos que creo de esta forma no van a poder acceder a las funciones de la clase hija (o sea del auto) 
Si yo hago esto (sin upcasting): 
Auto a = new Auto();
puedo hacer esto: 
a.acelerar(); //Porque es una funcion de la clase hija

Pero si hago esto (c/upcasting):
Vehiculo v = a;



- ESPECIALIZACION (downcasting): La especializacion no funciona por si sola, no es automatica como el upcasting, por lo que si tenemos que castear explicitamente

Ejemplo: 
public static void main(){
    Vehiculo v = new Moto();
    Moto m = (Moto) v;
    m.hacerWheliee(); //Esta funcion es de la clase Moto, por lo que NO FUNCIONA porque cuando creamos el objeto v lo creamos como un auto y no una moto. Va a tirar como error ClassCastException: Un auto no puede ser casteado como moto
}
¿Como lo solucionamos? Con instanceof, un operador logico que nos permite conocer si un objeto es de un determinado tipo. 
Asi funciona instanceof: 
public static void main(){
    Vehiculo v = new Moto();
    System.out.printIn(v instanceof Moto); //Va a retornar true
    System.out.printIn(v instanceof Object); //Va a retornar true
    System.out.printIn(v instanceof String); //Va a retornar false
}
--> Entonces con esta herramienta tenemos que hacer un condicional como el siguiente: 
public static void main(){
    Vehiculo v = new Auto();
    if(v instanceof Moto){
        Moto m = (Moto) v;
        m.hacerWheliee();
    }
    else{
        System.out.printIn('No era una moto')
    }
}

- CLASE ABSTRACTA: Me sirve para evitar que alguien me instancie un objeto de esa clase. Podria hacer que la clase Vehiculo sea abstracta asi no tengo objetos de tipo Vehiculo, sino que de tipo Moto, Auto, etc. 
--> Si hay un metodo abstracto ya toda la clase tiene que ser abstracta. 
--> Ademas con la clase abstracta obligo a todas las subclases a declarar los mismo metodos, no importa si estan vacios. 
Puedo tener objetos de tipo Vehiculo pero no puedo instanciar objetos de tipo Vehiculo
--> Puedo: Vehiculo v = new Auto();
--> No puedo: Vehiculo v = new Vehiculo();

- No siempre la generalizacion lleva a que sea abstracta, unicamente cuando es conveniente


/*01/09/2022*/

Castear sirve para asegurarse de que un dato es de un tipo en concreto

Upcasting es encasillar de un objeto hijo a un objeto padre. 

Downcasting es encasillar un objeto padre a un objeto hijo. 
