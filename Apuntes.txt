APUNTES: Herencia, generalizacion (upcasting), especializacion (downcasting), casting

--> Toda subclase hereda todos los miembros no privados de la superclase (excepto los constructores)
--> Toda clase hereda de object

- Si vehiculo tiene el atributo marca y es privado la clase Auto, que hereda de la superclase Vehiculo, no va a poder acceder desde la clase (A menos que sea no privado)

Un paquete comparte ciertas clases

- Public: Acceden todos
- Protected: No puede acceder otra clase en otro paquete (es comodo pero no esta bueno). 
- Sin modificador: No puede acceder una subclase o clase en otro paquete (Unicamente es visible dentro de un mismo paquete)
- Private: Unicamente puede acceder la misma clase. 

--> Todos los atributos de una clase tienen que ser private y en todo caso los getters son protected. 

- Los constructores no se heredan, cada clase tiene su propio constructores
    --> La subclase en su constructor tiene que mandarle por super() los atributos que recibe en su propio constructor. 
    Ejemplo: 
    public Vehiculo(String ma, String mo, String pa){
        super(); //Aca invoca al constructor de la superclase (Object). NO es obligatorio
        this.marca = ma;
        this.modelo = mo;
        this.patente = pa;
    }


    public Auto(String, ma, String mo, Strin pa, boolean ta){
        super(ma, mo, pa); //Aca invoca al constructor de la superclase (Vehiculo)
        /*
        Si la superclase no necesita ningun parametro NO hay que poner lo siguiente: 
        super(); 
        */
        this.tieneAire = ta;
    }

- GENERALIZACION (upcasting): La herencia es hacia abajo, los hijos pueden usar los metodos del padre pero no los propios del hijo. La descendencia es hacia abajo. 
Ejemplos: 
    public static void main(...){
        Auto a = new Auto();
        Vehiculo v = new Vehiculo();
        Vehiculo v2 = new Auto();
        Moto m = new Vehiculo(); //Esto NO se puede hacer porque una variable de tipo hijo no puede guardar al padre
        /*De arriba a abajo se puede pero de abajo a arriba no*/
    }

--> El casting hacia arriba se hace de manera implicita. Por eso programamos asi:  
    Auto a = new Auto()

    Y esto es innecesario: 

    Vehiculo v = a;
    Vehiculo v2 = (Vehiculo) a;

    --> No es necesario castear porque ya se que el auto es un vehiculo

    --> Con el ejemplo de una concesionaria puedo tener una lista de vehiculos en lugar de tener una lista de autos, otra de camionetas y otra de motos. 
    
    En lugar de esto: 
    public void agregarAuto(Auto a);
    public void agregarMoto(Moto m);
    public void agregarCamioneta(camioneta c);

    Tengo esto: 
    public void agregarVehiculo(Vehiculo v){
        this.vehiculos.add(v)
    }

    /*De este modo tendria que definir los vehiculos así: Vehiculo v2 = new Auto();*/

--> El unico problema de la generalizacion es que los objetos que creo de esta forma no van a poder acceder a las funciones de la clase hija (o sea del auto) 
Si yo hago esto (sin upcasting): 
Auto a = new Auto();
puedo hacer esto: 
a.acelerar(); //Porque es una funcion de la clase hija

Pero si hago esto (c/upcasting):
Vehiculo v = a;



- ESPECIALIZACION (downcasting): La especializacion no funciona por si sola, no es automatica como el upcasting, por lo que si tenemos que castear explicitamente

Ejemplo: 
public static void main(){
    Vehiculo v = new Moto();
    Moto m = (Moto) v;
    m.hacerWheliee(); //Esta funcion es de la clase Moto, por lo que NO FUNCIONA porque cuando creamos el objeto v lo creamos como un auto y no una moto. Va a tirar como error ClassCastException: Un auto no puede ser casteado como moto
}
¿Como lo solucionamos? Con instanceof, un operador logico que nos permite conocer si un objeto es de un determinado tipo. 
Asi funciona instanceof: 
public static void main(){
    Vehiculo v = new Moto();
    System.out.printIn(v instanceof Moto); //Va a retornar true
    System.out.printIn(v instanceof Object); //Va a retornar true
    System.out.printIn(v instanceof String); //Va a retornar false
}
--> Entonces con esta herramienta tenemos que hacer un condicional como el siguiente: 
public static void main(){
    Vehiculo v = new Auto();
    if(v instanceof Moto){
        Moto m = (Moto) v;
        m.hacerWheliee();
    }
    else{
        System.out.printIn('No era una moto')
    }
}

- CLASE ABSTRACTA: Me sirve para evitar que alguien me instancie un objeto de esa clase. Podria hacer que la clase Vehiculo sea abstracta asi no tengo objetos de tipo Vehiculo, sino que de tipo Moto, Auto, etc. 
--> Si hay un metodo abstracto ya toda la clase tiene que ser abstracta. 
--> Ademas con la clase abstracta obligo a todas las subclases a declarar los mismo metodos, no importa si estan vacios. 
Puedo tener objetos de tipo Vehiculo pero no puedo instanciar objetos de tipo Vehiculo
--> Puedo: Vehiculo v = new Auto();
--> No puedo: Vehiculo v = new Vehiculo();

- No siempre la generalizacion lleva a que sea abstracta, unicamente cuando es conveniente


/*01/09/2022*/

Castear sirve para asegurarse de que un dato es de un tipo en concreto

Upcasting es encasillar de un objeto hijo a un objeto padre. 

Downcasting es encasillar un objeto padre a un objeto hijo.

08/09/2022

La herencia no tiene mucho sentido sin el polimorfismo. 
--> ¿Qué es el polimorfismo?  
    Es una relajacion del sistema de tipos, de tal manera que una referencia a una clase (ya sea un atributo, parametro, declaracion local o elemento de una coleccion) acepta direcciones de objetos de dicha clase y de sus clases derivadas (hijas, nietas, etc)
Esto quiere decir que un coso de Vehiculo acepta direcciones de memoria que apunten a objetos de tipo Auto, Bicicleta, etc (porque son derivadas de la clase)
Propiedad por la que es posible enviar mensajes sintacticamente iguales a objetos de tipos distintos. El unico requisito que tienen que cumplir los objetos que se utilizan de manera polimorfica es saber responder al mensaje que se les envia. 
Es decir, a distintos tipos de objetos yo puedo enviarle el mismo tipo de mensaje y cada uno va a saber reaccionar a su propia manera, es decir puedo pedirles que ejecuten una accion y cada clase va a ejecutar su propio metodo.
Esto sirve porque si despues agregas otra clase no te preocupas porque cumpla con todos los metodos y atributos porque se pueden customizar. 
Ademas eliminamos los condicionales:
    /*ESTO ES LO QUE NO HAY QUE HACER, solucion inicial de programacion estructurada*/
    if(tipo == "pajaro"){
        print("pio pio")
    }else if(tipo == "gallo"){
        print("co co ro co")
    }else if(tipo == "vaca"){
        print("muu")
    }

Lo correcto seria: 

Collection<Cantante> cantantes;

cantantes.add(new Gallo()));
cantantes.add(new Pajaro()));
cantantes.add(new Pollo()));

for (Cantante /*TIPO DE DATO*/ cantante /*NOMBRAMOS A CADA ITEM DEL ARRAY*/ : cantantes /*ARRAY QUE RECORRE*/){
    cantante.cantar();
}

/*Si el dia de mañana quiero agregar otro cantante: cantantes.add(new Tini())); no tengo que volver a tocar el for*/

--> Pilares de POO: 
    - Abstraccion
    - Polimorfismo
    - Encapsulamiento
    - Delegacion
    - Herencia

    Beneficios: 
    - Reduce el acoplamiento y hace que el codigo sea mas facil de leer
    - Podemos tener una clase que 


Ejemplo de ejercicio: 
Un resto ofrece pizzas de lunes a viernes y parrila los fines de semana pero ahora quiere agregar susi los viernes. 

/*ESTOS SON LOS OBJETOS*/

public Comida cocinar(){
    Harina h, Levadura l;
    Masa masa = mezclarIngredientes(h, l);
    ...
    return unaPizza;
}

public Comida cocinar(){
    prenderBrasas();
    condimentar(unaBondiola);
    ...
    return unaBondiola;
}

/*Y ESTA ES LA CLASE COCINA*/

public class Cocina{
    private Cocinero cocinero;

    public Comida cocinar(){
        return this.cocinero.cocinar()
    }

    public void reemplazarCocinero(Cocinero nuevoCocinero){
        this.cocinero = nuevoCocinero;
    }
}

//*OTRO CASOOO: El de los casilleros*//

En lugar de hacer que ocupado sea un atributo de la clase casillero hago otros 2 objetos que refieran a el estado ocupado y libre del casillero

//*OTRO CASOOO: El de la salamandra con el gasto sgun*//

/*Estas son las clases hijas que heredan de la padre (madera)*/
public class Quebracho extends Madera{
    private ...
    public int calcularGasto(){
        //calculo x
        return x*2;
    }
}

public class Pino extends Madera{
    private ...
    public int calcularGasto(){
        //calculo y
        return y+10;
    }
}

/*Esta es como la clase main*/

public class Salamandra{
    private Collection<Madera> maderas;

    public int gastoTotal(){
        int gasto = 0;
        for (Madera madera : maderas){
            gasto += madera.caclularGasto();
        }
        return gasto;
    }
}

/*De todos modos aca faltaria programar la clase madera*/
/*Es muy importante hacer en la clase principal (corte el main) un array con los tipos de objetos que voy a trabajar (maderas) en lugar de llamar directamente a las clases (Pino y Quebracho). Porque no se a que clase voy a llamar y porque de este modo puedo agregar todas las maderas que quiera*/



Ventajas y desventajas del polimorfismo: 
    - Objetos distintos que entienden el mismo mensaje
    - Los comportamientos se resuelven dentro de esos objetos
    - Quien invoca a los objetos polimorficos no tiene conocimiento sobre a quien esta llamando (deventaja)


06/10/2022

TDAs: Tipos de datos abstracto. Tienen una interface especifica con operaciones bien definidas. Estan diseñadas para manipular de forma clara y predeterminada los elementos de un conjunto de datos, puedo implementar una pila una cola sobre vectores pero de una determinada manear, no puedo trabajar como yo quiera. Ademas los reconocemos con muhca facilidad en la vida cotidiana. 
¿Que nos importa? Su comportamiento y las operaciones (metodos) que puedo hacer sobre ellas. 
¿Que no nos importa sobre ellas? La implementacion interna (como esta hecho), el lenguaje de programacion usado y la clase especifica de los elementos manipulados. 
Interface: En esta todos los metodos tienen que se abstractos, no admite atributos y si constantes. Es como un contrato que se estbalece porque s eobligan a las clasas que la usen o implementen a desarrollar sus metodos (que matcheen, es decir que pueda hacer todos los metodos que tiene la clase)  
Su gracia es que no nos importa como lo hace
CONTENEDORES: 
    - No iterables: (contenedores que determinan el orden de los elementos independientemente del dato). Aca se puede insertar un elemento, sacar un elemento, ver si esta vacia y ver si esta llena (Por eso me interesan las operaciones que puedo hacer sobre estos). Las pilas son lentas porquei si quier insertar un nuevo elemento tengo que recorrerla toda. Tiene un unico punto de acceso y solo se puede conocer o extraer el ultimo elemento agregado, aunque dependiendo de la implementacion (es decir que si tenes un metodo que te lo permita) a veces te deja espiar quien es el proximo pero sin extraerlo. 
        PILA --> El ultimo en entrar es el primero en salir, porque es el que queda arriba de todo (LIFO). Agrega siempre "al fondo" y solo se puede conocer o extraer el primer elemento agregado.
        COLA --> El primero en entrar es el primero en salir (FIFO). 
    - Iterables: (Contenedores que no determinan el orden de los elementos, desordenados o dependiendo de sus datos)
        - LISTA --> Agregar en la posicion calculada segun un orden definido especificamente. Se puede aaceder o extraer cualquier elemento contenido y se puede ubicar por posicion o por clave.
        - ARBOL
        - MAPA


Cuando es herencia ponemos EXTENDS y cuando es interface ponemos IMPLEMENTS

/*foto de codigo*/
Las interfaces saben decir si estan llenas o vacias
La flecha de interface es linea punteada con la punta vacia (clase a, flecha apuntando hacia b, implementa, una clase b)
En UML para decir que un metodo es abstracto lo ponemos en letra italica